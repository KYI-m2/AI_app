import streamlit as st
from streamlit_option_menu import option_menu
import streamlit.components.v1 as html
from  PIL import Image
import numpy as np
import pandas as pd 
import io 
import keras
from keras.models import model_from_json
from pathlib import Path
from tensorflow.keras.preprocessing import image
import numpy as np
from keras.applications import vgg16
import requests 
import base64
import openpyxl
from streamlit_webrtc import webrtc_streamer
import streamlit as st
import requests
import json
import requests
import streamlit_lottie
from streamlit_lottie import st_lottie 
import gspread
from oauth2client.service_account import ServiceAccountCredentials

page_bg_img= """
<style>
[data-testid="stAppViewContainer"] {
background-color: #b3ffb3;
opacity: 0.8;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

side_bg_img= """
<style>
[data-testid="stSidebar"] {
background-color: #b3ffb3;
opacity: 0.8;
}
</style>
"""
st.markdown(side_bg_img, unsafe_allow_html=True)

    
import requests
import streamlit as st


def download_file_from_google_drive(file_id, destination):
    base_url = "https://drive.google.com/uc?export=download"
    session = requests.Session()

    # First request to get the download confirmation token (if required)
    response = session.get(base_url, params={'id': file_id}, stream=True)
    token = get_confirm_token(response)

    if token:
        # Add the confirmation token to the params for the second request
        params = {'id': file_id, 'confirm': token}
        response = session.get(base_url, params=params, stream=True)

    # Save the file
    save_response_content(response, destination)

def get_confirm_token(response):
    """Extract the confirmation token from cookies."""
    for key, value in response.cookies.items():
        if key.startswith('download_warning'):
            return value
    return None

def save_response_content(response, destination):
    """Save the file content to the specified destination."""
    with open(destination, "wb") as f:
        for chunk in response.iter_content(32768):
            if chunk:  # Filter out keep-alive chunks
                f.write(chunk)

# Automatically download the file when the app opens
with st.spinner("Downloading..."):
    try:
        file_id = "1vvfkI-Qeo7xu1DS7FVGFqt9qKG950HhX"  # Replace with your Google Drive file ID
        destination = "model_ny9new.weights.h5"  # Desired filename
        download_file_from_google_drive(file_id, destination)
    except Exception:
        pass  # Silently handle errors if any

css = '''
<link href="https://fonts.googleapis.com/css2?family=Outfit:wght@100..900&display=swap" rel="stylesheet">
<style>
   h1 {
      font-size: 36px;
      text-align: center;
      font-family: "Outfit", sans-serif;
   }
</style>
'''


st.markdown(css, unsafe_allow_html=True)




with st.sidebar:
    choose = option_menu("KYI", ["Home Page" , "About Us", "Image Classification", "Search Bar", "Contact Us"],
                         icons=['house','kanban','camera fill', 'book','person lines fill'],
                         menu_icon="app-indicator", default_index=0,
                         styles={
        "container": {"padding": "5!important", "background-color": "#fafafa"},
        "icon": {"color": "orange", "font-size": "25px"}, 
        "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#eee"},
        "nav-link-selected": {"background-color": "#02ab21"},
    }
    )

if choose == "Home Page" :
   if choose == "Home Page" :
    #st.set_page_config(layout="wide")
    col1, col2 = st.columns([1,3])
    with col2:
        st.title("Welcome to KYI üéâ!")
    with col1:
        col11, col22, col33 = st.columns(3)
        with col33:
            st.image("Logo.jpg",width=100)
        
    st.subheader("Know Your Insect üêúüáπüá≠!")
    st.balloons()
    st.write("KYI-Know Your Insect ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Machine Learning, Python ‡πÄ‡πÄ‡∏•‡∏∞ Streamlit   ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏©‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2  ‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏î‡∏¥‡∏ô‡∏ó‡∏£‡πÄ‡∏î‡∏ä‡∏≤(‡∏™‡∏¥‡∏á‡∏´‡πå ‡∏™‡∏¥‡∏á‡∏´‡πÄ‡∏™‡∏ô‡∏µ), ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡πÄ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á? ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡πÄ‡∏Ñ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡πÄ‡∏°‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡πÄ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡πÄ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô   ‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡πÄ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≥‡πÄ‡πÄ‡∏ô‡∏Å‡πÄ‡πÄ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏©‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ Search Bar ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡πÄ‡∏°‡∏•‡∏á‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏ß‡∏¢")
    st.divider()
    st.write("This is a Web-Application created with ML, Python, Streamlit made as a project to create a reliable and accessable data source of dangerous insects in Thailand, combining knowledge and technology, Brought to you by the M.2 students from Bodindecha (Sing Singhaseni) School, based in Bangkok, Thailand.  What can this Web Application do? It can be used to classify the  dangerous insects found mostly in Thailand with the method of just uploading your desired picture.")
    st.toast("Lets get started üèÅ ")
    st.toast("welcome to our web-based application!üìö")  
    col1, col2, col3 ,col4 ,col5 = st.columns(5)
    with col2:
        st.image("Insect.jpg")
    def load_lottieurl(url: str):
        r = requests.get(url)
        if r.status_code !=200: 
            return None 
        return r.json()
      
    lottie_hello = load_lottieurl("https://lottie.host/8103cbaf-fa16-4f16-b2b4-6651a2726912/PfOOZRZgup.json")
    st_lottie(lottie_hello)  
 
 
        
if choose == "About Us" :
 st.title('About Us ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤')
 css = '''
 <link href="https://fonts.googleapis.com/css2?family=Niramit:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600;1,700&family=Outfit:wght@100..900&display=swap" rel="stylesheet">
 <p style="color:Black; font-size: 20px; font-family:Niramit;">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°</p>
 '''
 st.markdown(css, unsafe_allow_html=True)
 st.image("aoon.jpg",width=300, caption="‡∏î.‡∏ç. ‡∏Å‡∏≤‡∏ô‡∏ï‡πå‡∏õ‡∏†‡∏≤ ‡∏õ‡∏£‡∏∞‡∏à‡∏¥‡∏ï‡∏£‡πå ‡∏°.2/3 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 21 (‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°)")
 st.image("peem.jpg",width=300, caption="‡∏î.‡∏ç. ‡∏ä‡∏ô‡∏±‡∏ô‡∏ò‡∏£ ‡∏°‡∏≤‡∏°‡∏µ‡∏ä‡∏±‡∏¢ ‡∏°.2/3 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 23")
 st.image("miu.jpg",width=300,caption="‡∏î.‡∏ç. ‡∏ê‡∏¥‡∏ï‡∏≤‡∏°‡∏£ ‡∏Å‡∏ì‡∏¥‡∏Å‡∏ô‡∏±‡∏ô‡∏ï‡πå ‡∏°.2/3 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 24")
 #helloworld


    
if choose == 'Search Bar':
    st.title('Search Bar')
    def load_lottieurl(url: str):
        r = requests.get(url)
        if r.status_code !=200: 
            return None 
        return r.json()
    lottie_hello = load_lottieurl("https://lottie.host/7cd0e391-66dc-42d9-9ca6-9a26aa8da25e/xn4QK6WpVX.json")
    st_lottie(lottie_hello)  
    # Load data from Google Sheets
    df = pd.read_csv(
        "https://docs.google.com/spreadsheets/d/e/2PACX-1vRbJASheYsGWBGRERpBkHJ0tGyLepOue779r-kCYiz9i063jnUqCVRRq5jpkkAfRf5J1O44tT6Tc2Z7/pub?gid=587778608&single=true&output=csv"
    )
    
    # Map insect names to image paths
    image_map = {
        "‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô": "A001_001.jpg",
        "‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å": "A002_027.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î": "A003_021.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ö‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô": "A004_006.jpg",
        "‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á": "A005_019.jpg",
        "‡∏ú‡∏∂‡πâ‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": "A006_001.jpg",
        "‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏™‡∏∑‡∏≠": "A007_083.jpg",
        "‡πÅ‡∏ï‡∏ô": "A008_008.jpg",
        "‡∏°‡∏ß‡∏ô‡πÄ‡∏û‡∏ä‡∏å‡∏Ü‡∏≤‡∏ï": "A009_001.jpg",
        "‡πÄ‡∏£‡∏∑‡∏≠‡∏î": "A010_001.jpg",
        "‡∏´‡∏ô‡∏≠‡∏ô‡∏ö‡∏∏‡πâ‡∏á‡∏£‡πà‡∏≤‡∏ô": "A11_080.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏™‡∏≤‡∏ö‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô": "A012_003.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏™‡∏≤‡∏ö‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô": "A013_001.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏™‡∏≤‡∏ö‡∏ú‡∏µ": "A014_031.jpg",
        "‡πÇ‡∏•‡∏ô": "A015_101.jpg",
        "‡∏°‡∏î‡∏Ñ‡∏±‡∏ô‡πÑ‡∏ü": "A016_073.jpg",
        "‡∏°‡∏î‡∏á‡πà‡∏≤‡∏°": "A017_084.jpg",
        "‡∏°‡∏î‡∏î‡∏≥": "A018_098.jpg",
        "‡∏°‡∏î‡∏ï‡∏∞‡∏ô‡∏≠‡∏¢": "A019_085.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "A020_052.jpg",
        "‡∏´‡∏°‡∏≤‡∏£‡πà‡∏≤": "A021_072.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß": "A022_001.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏Ñ‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå": "A023_001.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏≤": "A024_070.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡∏≤‡∏¢": "A025_001.jpg",
        "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ã‡πá‡∏ó‡∏ã‡∏µ": "A026_094.jpg",
        "‡∏¢‡∏∏‡∏á‡∏Å‡πâ‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏á": "A027_096.jpg",
        "‡∏¢‡∏∏‡∏á‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç": "A028_001.jpg",
        "‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô": "A029_056.jpg",
        "‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏™‡∏ß‡∏ô": "A030_085.jpg",
        "‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡∏∑‡∏≠": "A031_055.jpg",
        "‡∏£‡∏¥‡πâ‡∏ô‡∏î‡∏≥": "A032_099.jpg",
        "‡∏£‡∏¥‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏Ñ‡πá‡∏°": "A033_098.jpg",
        "‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢": "A034_027.jpg",
        "‡∏´‡∏°‡∏±‡∏î": "A035_025.jpg",
        "‡πÄ‡∏´‡∏≤": "A036_028.jpg",
    }
    
    # App title
    st.title("Insect Search")
    
    # Search bar
    query = st.text_input("Search for an insect:", "")
    
    # Search logic
    if query:
        # Filter the dataset based on the query
        results = df[df["insect_name"].str.contains(query, case=False, na=False)]
    
        # Display results dynamically
        if not results.empty:
            st.write(f"### Search Results for '{query}':")
            for _, row in results.iterrows():
                # Display insect details
                st.subheader(row["insect_name"])  # Display insect name
                if row["insect_name"] in image_map:
                    st.image(image_map[row["insect_name"]], caption=row["insect_name"])
                else:
                    st.write("No image available.")
                
                # Display other insect details
                st.write("**Scientific Name:**", row["insect_sci_name"])
                st.write("**Type:**", row["type"])
                st.write("**Characteristics:**", row["characteristics"])
                st.write("**Found In:**", row["find"])
                st.write("**Poison:**", row["poision"])
                st.write("**Symptoms:**", row["symptom"])
                st.write("**How to Protect:**", row["How to protect"])
                st.write("---")  # Separator for clarity
        else:
            st.write(f"No results found for '{query}'.")
    else:
        st.write("Enter an insect name to search.")
    
            

if choose == "Contact Us" :
    st.title('Contact Us')
    
    st.write("‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤: \n Gmail: webapplication.m2@gmail.com")
    def load_lottieurl(url: str):
         r = requests.get(url)
         if r.status_code !=200: 
             return None 
         return r.json() 
    lottie_hello = load_lottieurl("https://lottie.host/7c423378-4342-4a85-a43f-182d60239a2d/Kexj7XXBoQ.json")
    st_lottie(lottie_hello)


if choose == 'Image Classification' :
    def load_lottieurl(url: str):
        r = requests.get(url)
        if r.status_code !=200: 
            return None 
        return r.json()
      
    lottie_hello = load_lottieurl("https://lottie.host/291ab457-690e-43ef-a83b-81e146fa7f1b/frEvKtHszs.json")
    st_lottie(lottie_hello)  
 
    st.title('‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÄ‡πÄ‡∏ô‡∏Å‡πÄ‡πÄ‡∏°‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û/Image Classifycation')
    predicted_name = ''
    df_1 = pd.read_excel("output.xlsx",index_col = 0)
    new_index = len(df_1)
    

    st.divider()
    

    css = '''
    <link href="https://fonts.googleapis.com/css2?family=Niramit:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600;1,700&family=Outfit:wght@100..900&display=swap" rel="stylesheet">
    <p style="color:Black; font-size: 20px; font-family:Niramit;">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡πÄ‡∏°‡∏•‡∏á/Choose your classifycation method</p>
    '''
    st.markdown(css, unsafe_allow_html=True)

    css = '''
    <link href="https://fonts.googleapis.com/css2?family=Niramit:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600;1,700&family=Outfit:wght@100..900&display=swap" rel="stylesheet">
    <p style="color:Black; font-size: 14px; font-family:Niramit;">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û</p>
    '''
    st.markdown(css, unsafe_allow_html=True)
 
 
 
 
 
 
 
    
    my_image1 = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/Upload a picture")
    if my_image1:
        st.image(my_image1)
    
    st.divider()
    
    css = '''
    <link href="https://fonts.googleapis.com/css2?family=Niramit:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;1,200;1,300;1,400;1,500;1,600;1,700&family=Outfit:wght@100..900&display=swap" rel="stylesheet">
    <p style="color:Black; font-size: 14px; font-family:Niramit;">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</p>
    '''
    st.markdown(css, unsafe_allow_html=True)

    enable = st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á/Enable camera")
    


    my_image2 = st.camera_input("‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û/Take a picture", disabled=not enable)
    if my_image2:
        st.image(my_image2)
     # Load the json file that contains the model's structure
    f = Path("model_structure_ny9new.json")
    model_structure = f.read_text()


    model = model_from_json(model_structure)
    model.load_weights("model_ny9new.weights.h5")

    if my_image1 or my_image2 :
        if st.button('Predict'):
            my_image = my_image1 if my_image1 else my_image2
                
            img = image.load_img(my_image, target_size=(224, 224))
            image_array = image.img_to_array(img)
            images = np.expand_dims(image_array, axis=0)
            images = vgg16.preprocess_input(images)
    
            feature_extraction_model = vgg16.VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
            features = feature_extraction_model.predict(images)

                

            # Given the extracted features, make a final prediction using our own model
            results = model.predict(features)
            print('Probability:', results)

            predicted_class = np.argmax(results)

            predicted_name = 'None'
            predicted_name = 'None'
            if predicted_class==0:
                predicted_name = '‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô'
            elif predicted_class==1:
                predicted_name = '‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å'
            elif predicted_class==2:
                predicted_name = '‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î'
            elif predicted_class==3:
                predicted_name = '‡πÅ‡∏°‡∏•‡∏á‡∏ö‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô'
            elif predicted_class==4:
                predicted_name = '‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á'
            elif predicted_class==5:
                predicted_name = '‡πÄ‡∏£‡∏∑‡∏≠‡∏î'
            elif predicted_class==6:
                predicted_name = '‡πÇ‡∏•‡∏ô'
            elif predicted_class==7:
                predicted_name = '‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô'
            elif predicted_class==8:
                predicted_name = '‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢'
            result_text ='This is '+ predicted_name +' with confidence: ' + str(results[0][np.argmax(results)]*100)
            st.success(result_text)

            df = pd.read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vRbJASheYsGWBGRERpBkHJ0tGyLepOue779r-kCYiz9i063jnUqCVRRq5jpkkAfRf5J1O44tT6Tc2Z7/pub?gid=587778608&single=true&output=csv")
            insect_names = df["insect_name"]
            
            
            
            for index, i in enumerate(insect_names):
                if predicted_name == i:
                    if predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô':
                        st.image("A001_001.jpg")
                    elif predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å':
                        st.image("A002_027.jpg")
                    elif predicted_name == '‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î':
                        st.image("A003_021.jpg")
                    elif predicted_name == '‡πÅ‡∏°‡∏•‡∏á‡∏ö‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô':
                        st.image("A004_006.jpg")
                    elif predicted_name == '‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á':
                        st.image("A005_019.jpg")
                    elif predicted_name == '‡πÄ‡∏£‡∏∑‡∏≠‡∏î':
                        st.image("A010_001.jpg")
                    elif predicted_name == '‡πÇ‡∏•‡∏ô':
                        st.image("A015_101.jpg")
                    elif predicted_name == '‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô':
                        st.image("A029_056.jpg")
                    elif predicted_name == '‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢':
                        st.image("A034_027.jpg")
                    st.write(df['‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡∏•‡∏á'][index])
                    st.header(df["insect_name"][index])
                    st.text(df['insect_sci_name'][index])
                    st.text(df['type'][index])
                    st.subheader("‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏•‡∏á")
                    st.write(df['characteristics'][index])
                    st.subheader("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö")
                    st.write(df['find'][index])
                    if predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô':
                        st.image("A001.jpg")
                    elif predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å':
                        st.image("A002.jpeg")
                    elif predicted_name == '‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î':
                        st.image("A003.jpeg")
                    elif predicted_name == '‡πÅ‡∏°‡∏•‡∏á‡∏ö‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô':
                        st.image("A004.jpeg")
                    elif predicted_name == '‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á':
                        st.image("A005.jpeg")
                    elif predicted_name == '‡πÄ‡∏£‡∏∑‡∏≠‡∏î':
                        st.image("A010.jpeg")
                    elif predicted_name == '‡πÇ‡∏•‡∏ô':
                        st.image("A015.jpeg")
                    elif predicted_name == '‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô':
                        st.image("A029.jpeg")
                    elif predicted_name == '‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢':
                        st.image("A034.jpeg")
                    
                    st.subheader("‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏©") 
                    st.write(df['poision'][index])
                    st.subheader("‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏û‡∏¥‡∏©")
                    st.write(df['symptom'][index])
                    
                    if predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A002_‡πÅ‡∏°‡∏•‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å.jpg")
                    elif predicted_name == '‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A001_‡πÅ‡∏°‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 2.jpg")
                    elif predicted_name == '‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A003_‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î.jpg")
                    elif predicted_name == '‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A006_‡∏ú‡∏∂‡πâ‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå 2.jpg")
                    elif predicted_name == '‡πÄ‡∏£‡∏∑‡∏≠‡∏î':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A010_‡πÄ‡∏£‡∏∑‡∏≠‡∏î.jpg")
                    elif predicted_name == '‡πÇ‡∏•‡∏ô':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A015_‡πÇ‡∏•‡∏ô.jpg")
                    elif predicted_name == '‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A029_‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô (‡πÑ‡∏Ç‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å).jpg")
                    elif predicted_name == '‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢':
                        st.write("‡πÅ‡∏ú‡∏•:")
                        st.image("A034_‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢ (‡πÇ‡∏£‡∏Ñ‡∏•‡∏¥‡∏ä‡∏°‡∏≤‡πÄ‡∏ô‡∏µ‡∏¢).jpg")
                    else :
                        st.write("‡πÅ‡∏ú‡∏•: -")
                    st.write(df['‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏•'][index]) 
                    st.subheader("‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô")
                    st.write(df['How to protect'][index])
                    st.write("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : " , df['‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'][index])



            
        
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API URL ‡∏Ç‡∏≠‡∏á SheetDB
    SHEETDB_URL = "https://sheetdb.io/api/v1/9qm7a3nx8jjvs"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ô Streamlit
    st.title("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡πÄ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÄ‡πÄ‡∏ô‡∏Å‡πÄ‡πÄ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏©‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢")
    
    with st.form("data_form"):
        city = st.selectbox("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÅ‡∏°‡∏•‡∏á (Province)", ["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£/Krung Thep Maha Nakhon (Bangkok)","‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà/Krabi","‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ/Kanchanaburi","‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå/Kalasin","‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£/Kamphaeng Phet","‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô/Khon Kaen","‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ/Chanthaburi","‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤/Chachoengsao","‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ/Chonburi","‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó/Chainat","‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥/Chaiyaphum","‡∏ä‡∏∏‡∏°‡∏û‡∏£/Chumphon","‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢/Chiang Rai","‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà/Chiang Mai","‡∏ï‡∏£‡∏±‡∏á/Trang ","‡∏ï‡∏£‡∏≤‡∏î/Trat","‡∏ï‡∏≤‡∏Å/Tak","‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å/Nakhon Nayok","‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°/Nakhon Pathom","‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°/Nakhon Phanom",
    "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤/Nakhon Ratchasima",
    "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä/Nakhon Si Thammarat",
     "‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå/Nakhon Sawan",
     "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ/Nonthaburi",
     "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™/Narathiwat",
     "‡∏ô‡πà‡∏≤‡∏ô/Nan",
    "‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨/Bueng Kan",
     "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå/Buriram",
     "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ/Pathum Thani",
     "‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå/Prachuap Khiri Khan ",
     "‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ/Prachinburi ",                                                              
    "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ/Pattani ",
     "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤/Phra Nakhon Si Ayutthaya ",
    "‡∏û‡∏∞‡πÄ‡∏¢‡∏≤/Phayao ",
     "‡∏û‡∏±‡∏á‡∏á‡∏≤/Phang Nga ",
     "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á/Phatthalung",
     "‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£/Phichit ",
     "‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å/Phitsanulok",
     "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ/Phetchaburi",
     "‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå/Phetchabun",
     "‡πÅ‡∏û‡∏£‡πà/Phrae ",
     "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï/Phuket ",
     "‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°/Maha Sarakham ",
     "‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£/Mukdahan ",
     "‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô/Mae Hong Son ",
     "‡∏¢‡πÇ‡∏™‡∏ò‡∏£/Yasothon ",
     "‡∏¢‡∏∞‡∏•‡∏≤/Yala ",
     "‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î/Roi Et ",
     "‡∏£‡∏∞‡∏ô‡∏≠‡∏á/Ranong ",
     "‡∏£‡∏∞‡∏¢‡∏≠‡∏á/Rayong ",
     "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ/Ratchaburi ",
     "‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ/Lopburi ",
     "‡∏•‡∏≥‡∏õ‡∏≤‡∏á/Lampang ",
     "‡∏•‡∏≥‡∏û‡∏π‡∏ô/Lamphun ",
     "‡πÄ‡∏•‡∏¢/Loei ",
     "‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©/Sisaket ",
     "‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£/Sakon Nakhon ",
     "‡∏™‡∏á‡∏Ç‡∏•‡∏≤/Songkhla ",
     "‡∏™‡∏ï‡∏π‡∏•/Satun ",
     "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£/Samut Prakan ",
     "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°/Samut Songkhram ",
     "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£/Samut Sakhon ",
     "‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß/Sa Kaeo ",
     "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ/Saraburi ",
     "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ/Sing Buri ",
     "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢/Sukhothai ",
     "‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ/Suphan Buri ",
     "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ/Surat Thani ",
     "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå/Surin ",
     "‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢/Nong Khai ",
     "‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π/Nong Bua Lamhu ",
     "‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á Ang/Thong ",
     "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç/Amnat Charen ",
     "‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ/Udon Thani ",
     "‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå/Uttaradit ",
     "‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ/Uthai Thani",
     "‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ/Ubon Ratchathani" ])
        predicted_name = st.selectbox("‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", ["‡∏î‡πâ‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", "‡∏î‡πâ‡∏ß‡∏á‡∏Å‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏Å", "‡πÅ‡∏°‡∏•‡∏á‡∏ï‡∏î", "‡πÅ‡∏°‡∏•‡∏á‡∏ö‡∏∏‡∏Å‡∏ö‡πâ‡∏≤‡∏ô", "‡∏ú‡∏∂‡πâ‡∏á‡∏´‡∏•‡∏ß‡∏á",  "‡πÄ‡∏£‡∏∑‡∏≠‡∏î",
        "‡πÇ‡∏•‡∏ô","‡∏¢‡∏∏‡∏á‡∏•‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô","‡∏£‡∏¥‡πâ‡∏ô‡∏ù‡∏≠‡∏¢‡∏ó‡∏£‡∏≤‡∏¢"])
        
        performance = st.selectbox("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", ["‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"])
        check = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡πà‡∏ô", ["‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‡∏î‡∏µ‡∏°‡∏≤‡∏Å(Excellent)", "‚≠ê‚≠ê‚≠ê‚≠ê ‡∏î‡∏µ(Good)", "‚≠ê‚≠ê‚≠ê ‡∏û‡∏≠‡πÉ‡∏ä‡πâ(Fair)", "‚≠ê‚≠ê ‡∏ô‡πâ‡∏≠‡∏¢(Poor)", "‚≠ê ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î(Very poor)"])
        Feed_back = st.text_input("‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡πÄ‡∏ô‡∏∞(Enter your comments here)")

        submitted = st.form_submit_button("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        
        if submitted:
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á SheetDB
            data = {"data": [{"City": city, "Insecct": predicted_name, "Check": check, "Feedback": Feed_back, "Performmance": performance }]}
            response = requests.post(SHEETDB_URL, json=data)
    
            if response.status_code == 201:
                st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            else:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.text}")
